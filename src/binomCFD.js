/**
 * Tests the performance and accuracy of statistical packages to calculate
 * the Binomial CFD function. The function gives the probability that
 * a stake pool will mint exactly N number of blocks in an epoch
 * and the function is heavily used to compute the estimated returns
 * of a stake pool
 *
 * run with `node binomCFD.js`
 */
import {computeBinomCFD} from "./utils.js";


/**
 * Array of benchmark values computed by the Scipy library
 * in python for the binomial CDF for a fully saturated
 * stake pool on Cardano
 */

const binomCDFpyArr = [0.                , 0.                , 0.                ,
	0.                , 0.                , 0.                ,
	0.                , 0.                , 0.                ,
	0.                , 0.                , 0.                ,
	0.                , 0.0000000000000001, 0.0000000000000007,
	0.0000000000000034, 0.0000000000000149, 0.0000000000000618,
	0.0000000000002425, 0.0000000000009014, 0.0000000000031844,
	0.0000000000107176, 0.000000000034444 , 0.0000000001059195,
	0.0000000003122571, 0.0000000008840659, 0.0000000024076621,
	0.0000000063167759, 0.000000015987798 , 0.0000000390874977,
	0.0000000924206073, 0.000000211579622 , 0.0000004694779234,
	0.0000010107130355, 0.0000021131108181, 0.0000042942402288,
	0.0000084896070765, 0.0000163408621586, 0.0000306464668586,
	0.0000560428693496, 0.0000999993239226, 0.000174220717122 ,
	0.0002965555042768, 0.0004934944139245, 0.0008033138939801,
	0.0012798611007544, 0.0019968916681071, 0.0030527587180879,
	0.0045751184055656, 0.0067251771201476, 0.0097008781064382,
	0.013738335326999 , 0.019110796155519 , 0.0261244754140504,
	0.0351107668588764, 0.0464146071281977, 0.0603791276902686,
	0.0773271513255899, 0.0975405245637245, 0.1212386695184088,
	0.1485580287178115, 0.1795342129566906, 0.2140886094219772,
	0.2520209535131797, 0.2930089284475645, 0.336615274229558 ,
	0.3823022258205134, 0.4294524360691606, 0.4773949505118809,
	0.5254343571523773, 0.5728809839586538, 0.6190799833511652,
	0.6634373215612165, 0.705441050597925 , 0.7446767307666137,
	0.7808364295995065, 0.8137212836654554, 0.8432381143124699,
	0.8693909914126263, 0.8922689123663284, 0.9120308972167439,
	0.9288898019503874, 0.9430960415830932, 0.9549222218136458,
	0.964649435881719 , 0.9725557238753546, 0.9789069426895294,
	0.9839500769876263, 0.9879088480316458, 0.9909813538500805,
	0.9933394002752709, 0.9951291525196553, 0.9964727428027188,
	0.9974705014031772, 0.9982035267766907, 0.998736366495568 ,
	0.999119637840566 , 0.9993924699081904, 0.9995846949393218,
	0.9997187536842745, 0.9998113077188002, 0.9998745713312814,
	0.9999173880736503, 0.9999460837193799, 0.9999651296441935,
	0.9999776498643707, 0.9999858022571738, 0.9999910607357658,
	0.999994421011686 , 0.9999965484982214, 0.9999978831633254,
	0.9999987128751676, 0.9999992240471223, 0.9999995361703695,
	0.9999997250732566, 0.9999998384014258, 0.9999999058009434,
	0.9999999455409209, 0.9999999687726794, 0.9999999822390754,
	0.9999999899795248]

const poolStake = 70_000_000;
const totalAdaStaked = 21_870_000_000;

const BLOCKS_EPOCH = 21600;
const BLOCK_PROB = poolStake / totalAdaStaked;



export const binomialCDF = () => {

	let binomialCDFArr = []
	for (let i = 0; i <= 120; i++) {
		const binomcdf = computeBinomCFD(i, BLOCKS_EPOCH, BLOCK_PROB)
		binomialCDFArr.push(binomcdf)
	}

	console.table(binomialCDFArr)


	/**
	 * Example implementation of how to check how many blocks to will
	 * be minted in an epoch
	 */
	const randn = Math.random();

	let nblocks = 0;

	while (randn > binomialCDFArr[nblocks]) {
		if (nblocks > binomialCDFArr.length) break
		nblocks++;
	}


	console.log(`randn: ${randn}`)
	console.log(`nblocks: ${nblocks}`)

	/**
	 * Check consistency with binomial CDF calc from Python
	 * Uses the scipy library in python
	 */

	let errorArr = [];
	for (let i = 0; i < binomialCDFArr.length; i++) {
		const diff = binomCDFpyArr[i] - binomialCDFArr[i]
		errorArr.push(diff)

	}

	const maxError = Math.max(...errorArr.map(a => Math.abs(a)))
	console.log(maxError)

	return maxError

}

binomialCDF()


